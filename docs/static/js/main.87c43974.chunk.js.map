{"version":3,"sources":["../../src/index.ts","../../src/DetectableOverflow.tsx","App.js","registerServiceWorker.js","index.js"],"names":["_this","DetectableOverflow","prototype","componentDidUpdate","this","App","useState","input","updateInput","width","updateWidth","isOverflow","updateIsOverflow","StrictMode","className","href","htmlFor","id","type","value","onChange","e","target","checked","style","backgroundColor","textOverflow","whiteSpace","overflow","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"wMAAA,YACA,UAAe,sB,ueCDf,WACI,EAAJ,MAcM,EAAuB,CAC3B,MAAO,OACP,aAAc,WACd,WAAY,SACZ,SAAU,UAGZ,cAII,SAAF,EAAY,GAAZ,MACE,YAAM,IAAM,K,OACR,EAAC,IAAM,EAAM,YACbA,EAAC,MAAQ,CAAE,cAAc,GACzBA,EAAC,YAAc,EAAK,YAAY,KAAK,G,EAmD7C,OA3DwC,OAWpC,EAAF,uCACE,KAAK,eAGLC,EAAmBC,UAAUC,mBAAqB,WAC9CC,KAAC,eAGL,EAAF,iCACM,GAAqB,OAArB,KAAK,IAAI,QAAT,CAIA,IAAE,EACJ,KAAK,IAAI,QAAQ,cAAgB,KAAK,IAAI,QAAQ,aAClD,KAAK,IAAI,QAAQ,eAAiB,KAAK,IAAI,QAAQ,aAEjD,IAAa,KAAK,MAAM,eAI5B,KAAK,SAAS,CAAE,aAAc,IAC1B,KAAK,MAAM,UACb,KAAK,MAAM,SAAS,MAItB,EAAF,4BACM,IAAE,EAAM,KAAK,MAAM,IAAM,KAAK,MAAM,IA/CjB,MAgDjB,EAAQ,KAAK,MAAM,MAAQ,KAAK,MAAM,MAAQ,EAC9C,EAAY,KAAK,MAAM,UAAY,KAAK,MAAM,UAAY,GAEhE,OACE,gBAAC,UAAmB,CAAC,aAAW,EAAC,SAAU,KAAK,YAAa,UAAW,KAAK,KAEzE,EAAM,cACJ,EACA,CACE,MAAK,EACL,UAAS,EACT,IAAK,KAAK,KAEZ,KAAK,MAAM,YAMvB,EA3DA,CAAwC,EAAM,WAAjC,wB,gJC+DEC,EA9EH,WAAO,IAAD,EACaC,mBAAS,IADtB,mBACTC,EADS,KACFC,EADE,OAEaF,mBAAS,IAFtB,mBAETG,EAFS,KAEFC,EAFE,OAGuBJ,oBAAS,GAHhC,mBAGTK,EAHS,KAGGC,EAHH,KAKhB,OACE,eAAC,IAAMC,WAAP,WACE,wBAAQC,UAAU,aAAlB,SACE,oBAAIA,UAAU,YAAd,yCAEF,sBAAKA,UAAU,WAAf,UACE,mDACoB,mBAAGC,KAff,0DAeY,gDADpB,6GAEwE,mBAAGA,KAfnE,sFAegE,kBAFxE,OAKA,uBAAOC,QAAQ,aAAaF,UAAU,YAAtC,wBAGA,uBACEG,GAAG,aACHH,UAAU,aACVI,KAAK,OACLC,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAAOb,EAAYa,EAAEC,OAAOH,UAGxC,wBAAQL,UAAU,YAAlB,mBACA,wBAAOA,UAAU,QAAjB,UACE,uBAAOI,KAAK,QAAQJ,UAAU,eAAeS,QAAmB,KAAVd,EAAcW,SAAU,kBAAMV,EAAY,OADlG,mBAIA,wBAAOI,UAAU,QAAjB,UACE,uBACEI,KAAK,QACLJ,UAAU,eACVS,QAAmB,SAAVd,EACTW,SAAU,kBAAMV,EAAY,WALhC,UASA,wBAAOI,UAAU,QAAjB,UACE,uBACEI,KAAK,QACLJ,UAAU,eACVS,QAAmB,UAAVd,EACTW,SAAU,kBAAMV,EAAY,YALhC,WAUA,wBAAOM,QAAQ,cAAcF,UAAU,YAAvC,UACG,kCACD,uBACEA,UAAU,iBACVU,MAAO,CACLC,gBAAiBd,EAAa,UAAY,WAH9C,iCAKmBA,QAErB,cAAC,IAAD,CACEa,MAAO,CACLE,aAAc,WACdC,WAAY,SACZC,SAAU,SACVnB,MAAOA,EACPgB,gBAAiBd,EAAa,UAAY,WAE5CS,SAAUR,EACVE,UAAU,SATZ,SAWGP,WCpELsB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAjBxB,OAuBS,SAAAC,GACLF,QAAQE,MAAM,4CAA6CA,MCzEjEC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,6BAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,6BAAN,sBAEP3B,IAiDV,SAAiCO,GAE/BuB,MAAMvB,GACHI,MAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BT,OAAOC,SAASmC,eAKpBhC,EAAgBC,MAftB,OAkBS,WACLY,QAAQC,IACN,oEArEAmB,CAAwBhC,GAIxBC,UAAUC,cAAc2B,MAAMzB,MAAK,WACjCQ,QAAQC,IACN,gHAMJd,EAAgBC,OCzCxBiC,K","file":"static/js/main.87c43974.chunk.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DetectableOverflow_1 = require(\"./DetectableOverflow\");\nexports.default = DetectableOverflow_1.DetectableOverflow;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DetectableOverflow = void 0;\nvar React = require(\"react\");\nvar react_resize_detector_1 = require(\"react-resize-detector\");\nvar defaultTag = 'div';\nvar defaultStyle = {\n    width: '100%',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n};\nvar DetectableOverflow = /** @class */ (function (_super) {\n    __extends(DetectableOverflow, _super);\n    function DetectableOverflow(props) {\n        var _this = _super.call(this, props) || this;\n        _this.ref = React.createRef();\n        _this.state = { isOverflowed: false };\n        _this.updateState = _this.updateState.bind(_this);\n        return _this;\n    }\n    DetectableOverflow.prototype.componentDidMount = function () {\n        this.updateState();\n    };\n    DetectableOverflow.prototype.componentDidUpdate = function () {\n        this.updateState();\n    };\n    DetectableOverflow.prototype.updateState = function () {\n        if (this.ref.current === null) {\n            return;\n        }\n        var newState = this.ref.current.offsetWidth !== this.ref.current.scrollWidth ||\n            this.ref.current.offsetHeight !== this.ref.current.scrollHeight;\n        if (newState === this.state.isOverflowed) {\n            return;\n        }\n        this.setState({ isOverflowed: newState });\n        if (this.props.onChange) {\n            this.props.onChange(newState);\n        }\n    };\n    DetectableOverflow.prototype.render = function () {\n        var tag = this.props.tag ? this.props.tag : defaultTag;\n        var style = this.props.style ? this.props.style : defaultStyle;\n        var className = this.props.className ? this.props.className : '';\n        return (React.createElement(react_resize_detector_1.default, { handleWidth: true, onResize: this.updateState, targetRef: this.ref }, React.createElement(tag, {\n            style: style,\n            className: className,\n            ref: this.ref,\n        }, this.props.children)));\n    };\n    return DetectableOverflow;\n}(React.Component));\nexports.DetectableOverflow = DetectableOverflow;\n//# sourceMappingURL=DetectableOverflow.js.map","import React, { useState } from 'react';\nimport DetectableOverflow from 'react-detectable-overflow';\nimport './App.css';\n\nconst repoURL = 'https://github.com/h-kanazawa/react-detectable-overflow';\nconst demoURL = 'https://github.com/h-kanazawa/react-detectable-overflow/tree/master/demo/src/App.js';\n\nconst App = () => {\n  const [input, updateInput] = useState('');\n  const [width, updateWidth] = useState('');\n  const [isOverflow, updateIsOverflow] = useState(false);\n\n  return (\n    <React.StrictMode>\n      <header className=\"app-header\">\n        <h1 className=\"app-title\">React Detectable Overflow</h1>\n      </header>\n      <div className=\"app-body\">\n        <p>\n          This is a demo of <a href={repoURL}>react component DetectableOverflow</a>. Try to change the input text, the\n          width, and browser window's size. You can see this page's source code <a href={demoURL}>here</a>.\n        </p>\n\n        <label htmlFor=\"input-text\" className=\"app-label\">\n          input text\n        </label>\n        <input\n          id=\"input-text\"\n          className=\"input-text\"\n          type=\"text\"\n          value={input}\n          onChange={(e) => updateInput(e.target.value)}\n        />\n\n        <legend className=\"app-label\">width</legend>\n        <label className=\"radio\">\n          <input type=\"radio\" className=\"radio-button\" checked={width === ''} onChange={() => updateWidth('')} />\n          not specified\n        </label>\n        <label className=\"radio\">\n          <input\n            type=\"radio\"\n            className=\"radio-button\"\n            checked={width === '40px'}\n            onChange={() => updateWidth('40px')}\n          />\n          40px\n        </label>\n        <label className=\"radio\">\n          <input\n            type=\"radio\"\n            className=\"radio-button\"\n            checked={width === '120px'}\n            onChange={() => updateWidth('120px')}\n          />\n          120px\n        </label>\n\n        <label htmlFor=\"output-text\" className=\"app-label\">\n          {'Rendered <DetectableOverflow/> '}\n          <label\n            className=\"overflow-state\"\n            style={{\n              backgroundColor: isOverflow ? '#F39C12' : '#18BC9C',\n            }}\n          >{`isOverflowed: ${isOverflow}`}</label>\n        </label>\n        <DetectableOverflow\n          style={{\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            width: width,\n            backgroundColor: isOverflow ? '#F9E9CF' : '#BCF2E7',\n          }}\n          onChange={updateIsOverflow}\n          className=\"output\"\n        >\n          {input}\n        </DetectableOverflow>\n      </div>\n    </React.StrictMode>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}