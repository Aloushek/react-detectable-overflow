{"version":3,"sources":["../../src/index.ts","../../src/DetectableOverflow.tsx","App.js","registerServiceWorker.js","index.js"],"names":["DetectableOverflow","_this","prototype","componentDidMount","this","App","useState","input","updateInput","width","updateWidth","isOverflow","updateIsOverflow","className","Grid","Row","Col","xs","sm","smOffset","href","Form","onSubmit","e","preventDefault","FormGroup","controlId","bsSize","ControlLabel","FormControl","type","value","onChange","target","Radio","checked","Label","bsStyle","style","textOverflow","whiteSpace","overflow","backgroundColor","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.db174409.chunk.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DetectableOverflow_1 = require(\"./DetectableOverflow\");\nexports.default = DetectableOverflow_1.DetectableOverflow;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar React = require(\"react\");\nvar react_resize_detector_1 = require(\"react-resize-detector\");\nvar defaultTag = 'div';\nvar defaultStyle = {\n    width: '100%',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n};\nvar DetectableOverflow = /** @class */ (function (_super) {\n    __extends(DetectableOverflow, _super);\n    function DetectableOverflow(props) {\n        var _this = _super.call(this, props) || this;\n        _this.ref = null;\n        _this.state = { isOverflowed: false };\n        _this.updateState = _this.updateState.bind(_this);\n        return _this;\n    }\n    DetectableOverflow.prototype.componentDidMount = function () {\n        this.updateState();\n    };\n    DetectableOverflow.prototype.componentDidUpdate = function () {\n        this.updateState();\n    };\n    DetectableOverflow.prototype.updateState = function () {\n        if (this.ref === null) {\n            return;\n        }\n        var newState = this.ref.offsetWidth !== this.ref.scrollWidth ||\n            this.ref.offsetHeight !== this.ref.scrollHeight;\n        if (newState === this.state.isOverflowed) {\n            return;\n        }\n        this.setState({ isOverflowed: newState });\n        if (this.props.onChange) {\n            this.props.onChange(newState);\n        }\n    };\n    DetectableOverflow.prototype.render = function () {\n        var _this = this;\n        var tag = this.props.tag ? this.props.tag : defaultTag;\n        var style = this.props.style ? this.props.style : defaultStyle;\n        var className = this.props.className ? this.props.className : '';\n        var props = {\n            style: style,\n            className: className,\n            ref: function (el) {\n                _this.ref = (el instanceof HTMLElement) ? el : null;\n            },\n        };\n        return React.createElement(tag, props, React.createElement(react_resize_detector_1.default, { handleWidth: true, onResize: this.updateState }), this.props.children);\n    };\n    return DetectableOverflow;\n}(React.Component));\nexports.DetectableOverflow = DetectableOverflow;\n//# sourceMappingURL=DetectableOverflow.js.map","import React, { useState } from 'react';\nimport { Col, ControlLabel, Form, FormControl, FormGroup, Label, Grid, Radio, Row } from 'react-bootstrap';\nimport DetectableOverflow from 'react-detectable-overflow';\nimport './App.css';\n\nconst repoURL = 'https://github.com/h-kanazawa/react-detectable-overflow';\nconst demoURL = 'https://github.com/h-kanazawa/react-detectable-overflow/tree/master/demo/src/App.js';\n\nconst App = () => {\n  const [input, updateInput] = useState('');\n  const [width, updateWidth] = useState('');\n  const [isOverflow, updateIsOverflow] = useState(false);\n\n  return (\n    <div>\n      <header className=\"app-header\">\n        <h1 className=\"app-title\">React Detectable Overflow</h1>\n      </header>\n\n      <Grid>\n        <Row>\n          <Col xs={12} sm={6} smOffset={3}>\n            <p>\n              This is a demo of <a href={repoURL}>react component DetectableOverflow</a>. Try to change the input text,\n              the width, and browser window's size. You can see this page's source code <a href={demoURL}>here</a>.\n            </p>\n\n            <Form\n              onSubmit={(e) => {\n                e.preventDefault();\n              }}\n            >\n              <FormGroup controlId=\"input\" bsSize=\"sm\">\n                <ControlLabel>input text</ControlLabel>\n                <FormControl type=\"text\" value={input} onChange={(e) => updateInput(e.target.value)} />\n              </FormGroup>\n\n              <FormGroup controlId=\"width\" bsSize=\"sm\">\n                <ControlLabel>width</ControlLabel>\n                <Radio checked={width === ''} onChange={() => updateWidth('')}>\n                  not specified\n                </Radio>\n                <Radio checked={width === '40px'} onChange={() => updateWidth('40px')}>\n                  40px\n                </Radio>\n                <Radio checked={width === '120px'} onChange={() => updateWidth('120px')}>\n                  120px\n                </Radio>\n              </FormGroup>\n\n              <FormGroup controlId=\"output\" bsSize=\"sm\">\n                <ControlLabel>\n                  {'Rendered <DetectableOverflow/> '}\n                  <Label bsStyle={isOverflow ? 'warning' : 'success'}>{`isOverflowed: ${isOverflow}`}</Label>\n                </ControlLabel>\n                <DetectableOverflow\n                  style={{\n                    textOverflow: 'ellipsis',\n                    whiteSpace: 'nowrap',\n                    overflow: 'hidden',\n                    width: width,\n                    backgroundColor: isOverflow ? '#F9E9CF' : '#BCF2E7',\n                  }}\n                  onChange={updateIsOverflow}\n                  className=\"output\"\n                >\n                  {input}\n                </DetectableOverflow>\n              </FormGroup>\n            </Form>\n          </Col>\n        </Row>\n      </Grid>\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}